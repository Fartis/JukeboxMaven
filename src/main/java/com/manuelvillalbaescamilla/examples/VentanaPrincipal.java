/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VentanaPrincipal.java
 *
 * Created on 08-ago-2012, 21:19:42
 */
package com.blogspot.rolandopalermo.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.InputStream;
import java.net.URL;
import java.util.Map;
import javax.sound.sampled.SourceDataLine;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javazoom.jlgui.basicplayer.BasicController;
import javazoom.jlgui.basicplayer.BasicPlayer;
import javazoom.jlgui.basicplayer.BasicPlayerEvent;
import javazoom.jlgui.basicplayer.BasicPlayerException;
import javazoom.jlgui.basicplayer.BasicPlayerListener;

/**
 *
 * @author Rolando
 */
public class VentanaPrincipal extends javax.swing.JFrame implements BasicPlayerListener {

    private JFileChooser fileChooser;
    private SpectrumTimeAnalyzer espectrometro;
    private BasicPlayer player = null;
    private BasicController controller = null;
    private Map audioInfo = null;
    private long secondsAmount = 0;
    private double bytesLength;

    /** Creates new form VentanaPrincipal */
    public VentanaPrincipal() {
        initComponents();
        fileChooser = new JFileChooser();
        espectrometro = new SpectrumTimeAnalyzer();
        espectrometro.setDisplayMode(SpectrumTimeAnalyzer.DISPLAY_MODE_SPECTRUM_ANALYSER);
        espectrometro.setSpectrumAnalyserBandCount(80);
        espectrometro.setSpectrumAnalyserDecay(0.1f);
        int fps = SpectrumTimeAnalyzer.DEFAULT_FPS;
        espectrometro.setFps(fps);
        espectrometro.setPeakDelay((int) (fps * SpectrumTimeAnalyzer.DEFAULT_SPECTRUM_ANALYSER_PEAK_DELAY_FPS_RATIO));
        espectrometro.setBackground(Color.black);
        espectrometro.setVisColor(getViscolor("viscolor.txt"));
        pnlEspectrometro.add(espectrometro, BorderLayout.CENTER);
        player = new BasicPlayer();
        player.addBasicPlayerListener(this);
        controller = (BasicController) player;
        this.setLocationRelativeTo(null);
    }

    public String getViscolor(String path) {
        String viscolor = "";
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        try {
            archivo = new File(path);
            if (!archivo.exists()) {
                archivo = new File("viscolor.txt");
            }
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);
            String linea;
            while ((linea = br.readLine()) != null) {
                viscolor += (linea + "\n");
            }
        } catch (Exception e) {
            System.out.println("archivo no leido");
            e.printStackTrace();
        } finally {
            try {
                if (null != fr) {
                    fr.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        return viscolor;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblArchivo = new javax.swing.JLabel();
        txtArchivo = new javax.swing.JTextField();
        btnArchivo = new javax.swing.JButton();
        pnlEspectrometro = new javax.swing.JPanel();
        pnlBotones = new javax.swing.JPanel();
        btnPlay = new javax.swing.JButton();
        btnPause = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(".:: Graficador de audio ::.");

        lblArchivo.setText("Archivo:");

        btnArchivo.setText("...");
        btnArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoActionPerformed(evt);
            }
        });

        pnlEspectrometro.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlEspectrometro.setLayout(new java.awt.BorderLayout());

        btnPlay.setText(">");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });
        pnlBotones.add(btnPlay);

        btnPause.setText("||");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });
        pnlBotones.add(btnPause);

        btnStop.setText("â– ");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });
        pnlBotones.add(btnStop);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlEspectrometro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblArchivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblArchivo)
                    .addComponent(txtArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnArchivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlEspectrometro, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoActionPerformed
// TODO add your handling code here:
    int seleccion = fileChooser.showOpenDialog(this);
    if (seleccion == JFileChooser.APPROVE_OPTION) {
        try {
            File archivo = fileChooser.getSelectedFile();
            txtArchivo.setText(archivo.getPath());
            loadFile(archivo);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}//GEN-LAST:event_btnArchivoActionPerformed

private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
// TODO add your handling code here:
    play();
}//GEN-LAST:event_btnPlayActionPerformed

private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
// TODO add your handling code here:
    pause();
}//GEN-LAST:event_btnPauseActionPerformed

private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
// TODO add your handling code here:
    stop();
}//GEN-LAST:event_btnStopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            // Set System L&F
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException e) {
            // handle exception
        } catch (ClassNotFoundException e) {
            // handle exception
        } catch (InstantiationException e) {
            // handle exception
        } catch (IllegalAccessException e) {
            // handle exception
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArchivo;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel lblArchivo;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlEspectrometro;
    private javax.swing.JTextField txtArchivo;
    // End of variables declaration//GEN-END:variables

    private void loadFile(File _file) throws BasicPlayerException {
        controller.open(_file);
    }

    private void play() {
        try {
            if (player.getStatus() == BasicPlayer.STOPPED || player.getStatus() == BasicPlayer.UNKNOWN) {
                //Obtener siguiente de la lista
                controller.play();
            } else if (player.getStatus() == BasicPlayer.PLAYING) {
                controller.stop();
                this.play();
            } else if (player.getStatus() == BasicPlayer.PAUSED) {
                controller.resume();
            } else {
                controller.play();
            }
            //this.setBalance(_gui.getSliderBalance().getValue()/10f);
        } catch (BasicPlayerException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        }
    }

    private void stop() {
        try {
            if (player.getStatus() == BasicPlayer.PAUSED || player.getStatus() == BasicPlayer.PLAYING) {
                controller.stop();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void pause() {
        try {
            if (player.getStatus() == BasicPlayer.PLAYING) {
                controller.pause();
            } else if (player.getStatus() == BasicPlayer.PAUSED) {
                controller.resume();
            }
        } catch (BasicPlayerException ex) {
            System.out.println(ex);
        }
    }

    @Override
    public void opened(Object o, Map map) {
//        throw new UnsupportedOperationException("Not supported yet.");
        audioInfo = map;
        bytesLength = 0;
        if (map.containsKey("audio.length.bytes")) {
            bytesLength = Long.parseLong(map.get("audio.length.bytes").toString());
        }
    }

    @Override
    public void progress(int i, long l, byte[] bytes, Map map) {
//        throw new UnsupportedOperationException("Not supported yet.");
        long total = -1;
        if (total <= 0) {
            total = (long) Math.round(getTimeLengthEstimation(audioInfo) / 1000);
        }
        if (total <= 0) {
            total = -1;
        }
        //Actualizar el tiempo
        float progress = -1.0f;
        if ((i > 0) && ((bytesLength > 0))) {
            progress = (float) (i * 1.0f / bytesLength * 1.0f);
        }
        if (audioInfo.containsKey("basicplayer.sourcedataline")) {
            // Spectrum/time analyzer
            if (espectrometro != null) {
                espectrometro.writeDSP(bytes);
                espectrometro.writeDSP(bytes);
            }
        }
        if (audioInfo.containsKey("audio.type")) {
            String audioformat = (String) audioInfo.get("audio.type");
            if (audioformat.equalsIgnoreCase("mp3")) {
                if (total > 0) {
                    secondsAmount = (long) (total * progress);
                } else {
                    secondsAmount = -1;
                }
            } else if (audioformat.equalsIgnoreCase("wave")) {
                secondsAmount = (long) (total * progress);
            } else {
                secondsAmount = (long) Math.round(l / 1000000);
            }
            if (secondsAmount < 0) {
                secondsAmount = (long) Math.round(l / 1000000);
            }
        }
    }

    @Override
    public void stateUpdated(BasicPlayerEvent bpe) {
        int state = bpe.getCode();
        Object obj = bpe.getDescription();
        if (state == BasicPlayerEvent.EOM) {
            if (player.getStatus() == BasicPlayer.PAUSED || player.getStatus() == BasicPlayer.PLAYING) {
                //Avanzar Cursor
            }
        } else if (state == BasicPlayerEvent.PLAYING) {
            if (audioInfo.containsKey("basicplayer.sourcedataline")) {
                if (espectrometro != null) {
                    espectrometro.setupDSP((SourceDataLine) audioInfo.get("basicplayer.sourcedataline"));
                    espectrometro.startDSP((SourceDataLine) audioInfo.get("basicplayer.sourcedataline"));

                    espectrometro.setupDSP((SourceDataLine) audioInfo.get("basicplayer.sourcedataline"));
                    espectrometro.startDSP((SourceDataLine) audioInfo.get("basicplayer.sourcedataline"));
                }
            }

        } else if (state == BasicPlayerEvent.SEEKING) {
        } else if (state == BasicPlayerEvent.SEEKED) {
        } else if (state == BasicPlayerEvent.OPENING) {
            if ((obj instanceof URL) || (obj instanceof InputStream)) {
                //Titulo de un stream de audio
            }
        } else if (state == BasicPlayerEvent.STOPPED) {
            if (espectrometro != null) {
                espectrometro.stopDSP();
                espectrometro.repaint();
                espectrometro.stopDSP();
                espectrometro.repaint();
            }
        }
    }

    @Override
    public void setController(BasicController bc) {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    public long getTimeLengthEstimation(Map properties) {
        long milliseconds = -1;
        int byteslength = -1;
        if (properties != null) {
            if (properties.containsKey("audio.length.bytes")) {
                byteslength = ((Integer) properties.get("audio.length.bytes")).intValue();
            }
            if (properties.containsKey("duration")) {
                milliseconds = (int) (((Long) properties.get("duration")).longValue()) / 1000;
            } else {
                // Try to compute duration
                int bitspersample = -1;
                int channels = -1;
                float samplerate = -1.0f;
                int framesize = -1;
                if (properties.containsKey("audio.samplesize.bits")) {
                    bitspersample = ((Integer) properties.get("audio.samplesize.bits")).intValue();
                }
                if (properties.containsKey("audio.channels")) {
                    channels = ((Integer) properties.get("audio.channels")).intValue();
                }
                if (properties.containsKey("audio.samplerate.hz")) {
                    samplerate = ((Float) properties.get("audio.samplerate.hz")).floatValue();
                }
                if (properties.containsKey("audio.framesize.bytes")) {
                    framesize = ((Integer) properties.get("audio.framesize.bytes")).intValue();
                }
                if (bitspersample > 0) {
                    milliseconds = (int) (1000.0f * byteslength / (samplerate * channels * (bitspersample / 8)));
                } else {
                    milliseconds = (int) (1000.0f * byteslength / (samplerate * framesize));
                }
            }
        }
        return milliseconds;
    }
}
